class DamageOnCollideOnEnemy : ZilchComponent
{
    [Property]
    var Damage : Real = 10.0;
    
    [Property]
    var SendsDeathEvent : Boolean = true;

    [Property]
    var DieOnCollide : Boolean = true;
    
    var OriginRoot : Cog = null;
    var DamageText : Archetype = Archetype.DamageText;
    var HitBox : Archetype = Archetype.HitToEnemy;
    var DamageTexture : Cog;
    
    sends Death : ZilchEvent;
    sends ApplyDamage : DamageEvent;
    var IsCollided : Boolean = false;
    var DestroyingTime : Real = 0.5;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        this.DestroyingTime -= event.Dt;
        if(this.DestroyingTime <= 0)
            this.Owner.Destroy();
    }

    function OnCollisionStarted(collisionEvent : CollisionEvent)
    {
        var otherObject = collisionEvent.OtherObject;
        var otherDamageOnCollide = otherObject.DamageOnCollide;
        var otherRoot = otherObject.FindRoot();
        var playerRoot = this.Space.FindObjectByName("Player");
        
        if(otherRoot == this.OriginRoot || otherRoot != playerRoot)
        {
            return;
        }
        var health = otherObject.Health;
        if(health != null && !this.IsCollided)
        {
            var firstPoint = collisionEvent.FirstPoint;
            var damageEvent = DamageEvent();
            damageEvent.Normal = firstPoint.WorldNormalTowardsOther;
            damageEvent.Damage = this.Damage;
            damageEvent.WorldPoint = firstPoint.WorldPoint;
            otherObject.DispatchEvent(Events.ApplyDamage, damageEvent);
            
            this.IsCollided = true;
                
            this.Space.CreateAtPosition(this.DamageText, this.Owner.Transform.Translation + Real3(0,3,0));
            this.DamageTexture = this.Space.CreateAtPosition(this.HitBox, this.Owner.Transform.Translation);
        }
        
        if(this.SendsDeathEvent)
        {
            var toSend = ZilchEvent();
            this.Owner.DispatchEvent(Events.Death, toSend);
        }
    }
}